import java.util.Scanner;
import java.util.Stack;

class Location2D {
	private int row = 0;
	private int col = 0;
	
	public Location2D(int r, int c) { 
		row = r;
		col = c; 
	}
	
	public int getRow() { return row; }
	public int getCol() { return col; }
}

public class Main {
	public static char[][] map = { { '1', '1', '1', '1', '1', '1' }, 
            					   { 'e', '0', '1', '0', '0', '1' },
            			    	   { '1', '0', '0', '0', '1', '1' }, 
            					   { '1', '0', '1', '0', '1', '1' },
            					   { '1', '0', '1', '0', '0', 'x' },
            					   { '1', '1', '1', '1', '1', '1' } };
	
	public static boolean isValidLoc(int r, int c) {
		if (r < 0 || c < 0 || r >= map.length || c >= map.length) return false;
		else return map[r][c] == '0' || map[r][c] == 'x';
	}
	
	public static void main(String[] args) {
		Stack<Location2D> locStack = new Stack<>();
		Location2D entry = new Location2D(1, 0);
		locStack.push(entry);
		
		while (locStack.empty() == false) {
			Location2D here = locStack.pop();
			
			int r = here.getRow();
			int c = here.getCol();
			
			System.out.printf("(%d, %d) ", r, c);
			if (map[r][c] == 'x') {
				System.out.println("Escape maze success!");
				return;
			} else {
				map[r][c] = '.';
				if (isValidLoc(r - 1, c)) locStack.push(new Location2D(r - 1, c)); // check up
				if (isValidLoc(r + 1, c)) locStack.push(new Location2D(r + 1, c)); // check down
				if (isValidLoc(r, c - 1)) locStack.push(new Location2D(r, c - 1)); // check left
				if (isValidLoc(r, c + 1)) locStack.push(new Location2D(r, c + 1)); // check right
			}
		}
		
		System.out.println("Escape maze fail!");
	}
}
